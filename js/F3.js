var width = 1070,
    height = 600;

// The days for which we want to display the data
var selectedDays = [1, 2, 3, 4, 5, 6, 7];

var xScale = d3.scaleBand().range([40, width - 40]).padding(0.1),
    yScale = d3.scaleLinear().range([height/2, 0]);

const mockData = [[2071, 1290, 859, 590, 477, 829, 2221, 4363, 5421, 5891, 5900, 5953, 6376, 6593, 7083, 7469, 7543, 8394, 9053, 8000, 7336, 6922, 5986, 3946], [1922, 787, 430, 269, 281, 750, 2196, 4470, 5832, 6037, 6402, 6822, 6850, 6756, 7257, 7673, 7833, 8672, 9349, 8550, 7901, 7800, 6709, 4723], [2402, 1234, 640, 397, 370, 800, 2261, 4491, 5653, 5842, 6242, 6605, 6930, 6988, 7597, 7916, 8112, 8757, 9588, 8892, 8533, 8093, 7169, 5972], [4021, 2073, 1233, 678, 552, 897, 2107, 4080, 5053, 5329, 5778, 6150, 6546, 6690, 7608, 7823, 7645, 8672, 9561, 8931, 7440, 7568, 7573, 6674], [5772, 4661, 3545, 2307, 1148, 577, 971, 1874, 3022, 4375, 5737, 6639, 7339, 7660, 7788, 7882, 7736, 7964, 8012, 7998, 6902, 6611, 7036, 6845], [5848, 8463, 2473, 1511, 954, 1070, 1394, 1690, 2309, 3471, 4573, 5217, 5786, 6115, 6026, 6190, 6160, 6084, 5975, 6016, 5560, 5031, 3928, 2726], [1634, 676, 371, 308, 449, 923, 2399, 4042, 4958, 5413, 5713, 5830, 6211, 6398, 7020, 7396, 7168, 7869, 8169, 7365, 6532, 6249, 5271, 3771], [1753, 752, 361, 259, 342, 828, 2282, 4341, 5487, 5846, 5904, 6320, 6590, 6682, 7315, 7662, 7622, 8366, 9052, 8126, 7593, 7260, 6293, 4085], [2152, 948, 505, 324, 332, 756, 2411, 4660, 6043, 6082, 6183, 6481, 6822, 7023, 8259, 8109, 7817, 8711, 9372, 8379, 7708, 7956, 6807, 4860], [2659, 1244, 708, 410, 382, 774, 2346, 4602, 5769, 6204, 6350, 6684, 7082, 7304, 7953, 7901, 7751, 8535, 9371, 8894, 8065, 8198, 7458, 6083], [4414, 2664, 1589, 880, 692, 897, 1837, 3468, 4605, 5348, 5978, 6099, 6082, 6071, 6351, 6372, 6382, 7099, 7891, 7173, 5955, 6283, 6879, 6719], [5741, 4417, 3340, 2253, 1043, 582, 1065, 1613, 2904, 4461, 5702, 6716, 7314, 7551, 7693, 7926, 7942, 8304, 8359, 7968, 6801, 7047, 7232, 6970], [5868, 5183, 3970, 2782, 1643, 805, 1135, 1663, 2697, 4211, 5519, 6280, 6833, 7006, 7253, 7038, 6800, 7110, 6738, 6241, 5493, 4967, 4201, 2833], [1093, 579, 339, 238, 306, 628, 1579, 2998, 3759, 3981, 4075, 4192, 4555, 4537, 5146, 5468, 5173, 5846, 6176, 5509, 4886, 4775, 3848, 2592], [1169, 524, 256, 176, 205, 532, 1538, 3255, 4211, 4433, 4406, 4591, 4802, 5066, 5442, 5601, 5494, 6028, 6834, 6453, 6155, 5686, 4679, 3192], [1547, 683, 359, 216, 240, 546, 1683, 3558, 4347, 4392, 4312, 4451, 4834, 4987, 5420, 5633, 5345, 6028, 6367, 6541, 6083, 5902, 5165, 4021], [2190, 1058, 521, 309, 345, 570, 1673, 3271, 4092, 4303, 4608, 4754, 4806, 5013, 5471, 5544, 5349, 6114, 6735, 6441, 6073, 6151, 5534, 4419], [3019, 1687, 884, 559, 478, 652, 1444, 2942, 3713, 4081, 4390, 4460, 4574, 4735, 5452, 5380, 5236, 6143, 6766, 6823, 5715, 5479, 5582, 5260], [4376, 3413, 2653, 1692, 970, 465, 878, 1170, 2130, 3323, 4220, 4717, 5250, 5449, 5312, 5682, 5400, 5690, 5872, 6013, 4867, 4926, 5228, 5236], [4229, 3390, 2629, 1819, 1004, 466, 736, 1205, 1753, 2859, 4286, 4900, 5058, 5076, 5263, 5259, 5060, 5001, 4861, 4479, 3734, 3401, 2765, 1892], [1491, 813, 365, 273, 374, 717, 2072, 3993, 4983, 5490, 5750, 6053, 6344, 6507, 7133, 7413, 7442, 7820, 7910, 6971, 5652, 5402, 4517, 3041], [1499, 748, 421, 237, 395, 785, 2023, 4071, 5216, 5839, 6171, 6247, 6832, 7208, 7839, 7999, 7544, 7804, 7905, 7087, 5959, 5836, 5133, 3748], [2178, 1141, 605, 400, 549, 761, 1818, 3091, 4190, 5040, 5794, 6328, 6630, 7126, 7235, 7541, 7324, 6946, 6815, 6105, 4919, 4887, 4463, 3754], [2558, 1683, 1195, 831, 720, 626, 1082, 1523, 1977, 2440, 2882, 3577, 4264, 4486, 4697, 4921, 4615, 4049, 3790, 4103, 4009, 3939, 3345, 2351], [1272, 759, 439, 284, 244, 373, 830, 1342, 2023, 3099, 4087, 4745, 5384, 5965, 5760, 6349, 6534, 6283, 6282, 5813, 4775, 4876, 4825, 4264], [2732, 2002, 1430, 1088, 686, 399, 819, 1234, 1931, 3435, 4479, 5331, 6012, 6664, 6582, 6831, 6861, 6782, 6470, 6377, 5585, 5243, 5590, 4950], [3669, 2931, 2220, 1639, 1007, 520, 854, 1374, 1991, 3119, 4263, 4921, 6442, 6654, 7411, 6249, 5432, 5591, 5516, 4846, 4452, 3826, 3150, 2452], [1868, 1013, 489, 270, 308, 746, 2025, 4161, 5048, 5408, 5410, 5571, 6229, 6216, 6865, 7117, 6884, 7577, 7674, 6833, 5720, 5388, 4484, 3184], [1724, 692, 294, 219, 276, 725, 2215, 4497, 5817, 6057, 5981, 6113, 6741, 6942, 7458, 7571, 7521, 8303, 8851, 7767, 7018, 6887, 5809, 3894], [2020, 1005, 470, 336, 353, 760, 2141, 4369, 5786, 6207, 6193, 6764, 6684, 6602, 6715, 6969, 6812, 7487, 7801, 7290, 6897, 7023, 6380, 4613]];

const formattedData = mockData.map((dayData, dayIndex) => ({
    day: dayIndex + 1,
    value: dayData.map((hourValue, hourIndex) => ({
        hour: hourIndex,
        value: hourValue
    }))
}));

xScale.domain(formattedData.flatMap(day => day.value.map(hourData => hourData.hour)));
yScale.domain([0, d3.max(formattedData.flatMap(day => day.value.map(hourData => hourData.value)))]);

var svg = d3.select("#visualization4")
    .append("svg")
    .attr("width", width)
    .attr("height", height/2 + 20);

var g = svg.append("g")
    .attr("transform", "translate(" + 50 + "," + 20 + ")");

// X-axis
var xAxis = d3.axisBottom(xScale);

svg.append("g")
    .attr("transform", "translate(10," + (height/2) + ")")
    .call(xAxis);

// Y-axis
var yAxis = d3.axisLeft(yScale);

svg.append("g")
    .attr("transform", "translate(50, 0)")
    .call(yAxis);

// Color scale for the lines
var colorScale = d3.scaleOrdinal(d3.schemeCategory10);

// Generate line
var line = d3.line()
    .x(function(d) { return xScale(d.hour) + xScale.bandwidth() - 11; })
    .y(function(d) { return yScale(d.value); });

drawLines();

function drawLines() {
    svg.selectAll(".line").remove();
    svg.selectAll(".line")
        .data(formattedData.filter(day => selectedDays.includes(day.day)))
        .enter().append("path")
        .attr("class", "line")
        .attr("d", function(d) { return line(d.value); })
        .style("stroke", function(d, i) { return colorScale(i); })
        .on("mouseover", function(d) {
            d3.select(this)
                .transition()
                .duration(200)
                .style("stroke-width", 5);

            var mouseX = d3.mouse(this)[0];
            var invertedX = Math.round(mouseX / xScale.step() - 1.9);

            var tooltipText = "<b>" + d.day + " November 2022</b><br>" + invertedX + ":00 - " + (invertedX + 1) + ":00<br>Taxi rides: " + d.value[invertedX].value;

            tooltip.transition()
                .duration(100)
                .style("opacity", .92);
            tooltip.html(tooltipText)
                .style("left", (d3.event.pageX) + "px") // Really sketchy
                .style("top", (d3.event.pageY) + "px"); // Really sketchy
        })
        .on("mouseout", function(d) {
            d3.select(this)
                .transition()
                .duration(200)
                .style("stroke-width", 2);

            tooltip.transition()
                .duration(300)
                .style("opacity", 0);
        });
}

var tooltip = d3.select("#visualization4").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);

// Functie om de geselecteerde dagen bij te werken en de grafiek bij te werken
function updateChart(days) {
    selectedDays = days;
    console.log("updateChart");
    drawLines();
}